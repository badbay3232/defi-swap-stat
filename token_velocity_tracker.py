"""
Token Velocity Tracker ‚Äî —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ "—Å–∫–æ—Ä–æ—Å—Ç–∏" –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:
–Ω–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –∏ –±—ã—Å—Ç—Ä–æ –æ–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –∏–∑ —Ä—É–∫ –≤ —Ä—É–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π.
"""

import requests
import argparse
import time
from collections import defaultdict
from datetime import datetime, timedelta


ETHERSCAN_API = "https://api.etherscan.io/api"


def fetch_token_transfers(contract_address, api_key, days=7):
    end_time = int(time.time())
    start_time = end_time - days * 86400

    params = {
        "module": "account",
        "action": "tokentx",
        "contractaddress": contract_address,
        "startblock": 0,
        "endblock": 99999999,
        "sort": "asc",
        "apikey": api_key
    }

    response = requests.get(ETHERSCAN_API, params=params)
    if response.status_code != 200:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Etherscan.")
        return []

    txs = response.json().get("result", [])
    filtered = [
        tx for tx in txs
        if int(tx["timeStamp"]) >= start_time
    ]
    return filtered


def calculate_velocity(transfers):
    holders = defaultdict(set)
    timestamps = []

    for tx in transfers:
        from_addr = tx["from"]
        to_addr = tx["to"]
        ts = int(tx["timeStamp"])
        timestamps.append(ts)
        holders[to_addr].add(ts)

    num_holders = len(holders)
    tx_count = len(transfers)

    if not timestamps:
        return {"velocity": 0, "tx_count": 0, "holders": 0}

    time_span_days = (max(timestamps) - min(timestamps)) / 86400 or 1
    velocity = tx_count / time_span_days

    return {
        "velocity": round(velocity, 2),
        "tx_count": tx_count,
        "holders": num_holders,
        "days": round(time_span_days, 1)
    }


def main():
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.")
    parser.add_argument("contract", help="–ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (ERC-20)")
    parser.add_argument("api_key", help="Etherscan API Key")
    parser.add_argument("--days", type=int, default=7, help="–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)")
    args = parser.parse_args()

    print(f"[‚Ä¢] –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ {args.days} –¥–Ω–µ–π...")
    transfers = fetch_token_transfers(args.contract, args.api_key, args.days)

    print(f"[‚úì] –ù–∞–π–¥–µ–Ω–æ {len(transfers)} —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤. –†–∞—Å—á—ë—Ç velocity...")
    stats = calculate_velocity(transfers)

    print("\nüìä Velocity —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"- –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {stats['days']} –¥–Ω.")
    print(f"- –ö–æ–ª-–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {stats['holders']}")
    print(f"- –í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤: {stats['tx_count']}")
    print(f"- –°–∫–æ—Ä–æ—Å—Ç—å (tx/–¥–µ–Ω—å): {stats['velocity']}")


if __name__ == "__main__":
    main()
